{"version":3,"sources":["_helpers/fake-backend.js","_helpers/history.js","_constants/alert.constants.js","_constants/user.constants.js","_constants/twitt.constants.js","_reducers/authentication.reducer.js","_reducers/users.reducer.js","_reducers/twitts.reducer.js","_reducers/index.js","_reducers/registration.reducer.js","_reducers/alert.reducer.js","_helpers/store.js","_helpers/auth-header.js","components/Header/index.js","components/Header/Header.jsx","components/Footer/Footer.jsx","components/Footer/index.js","_actions/alert.actions.js","_services/user.service.js","_services/twitt.service.js","_actions/user.actions.js","_actions/twitt.actions.js","components/Forms/Auth/Login/index.js","components/Forms/Auth/Login/LoginForm.jsx","components/Forms/Auth/Register/index.js","components/Forms/Auth/Register/RegisterForm.jsx","assets/img/faces/user1-picture.png","components/Widgets/Spinner/index.js","components/Widgets/Spinner/Spinner.jsx","components/Widgets/TwittList/index.js","components/Widgets/TwittList/TwittList.jsx","components/Pages/Twitts/index.js","components/Pages/Twitts/TwittsPage.jsx","components/App/App.jsx","serviceWorker.js","index.js"],"names":["JSON","parse","localStorage","getItem","history","createBrowserHistory","alertConstants","SUCCESS","ERROR","CLEAR","userConstants","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","GETALL_REQUEST","GETALL_SUCCESS","GETALL_FAILURE","GET_USER_BY_ID_REQUEST","GET_USER_BY_ID_SUCCESS","GET_USER_BY_ID_FAILURE","UPDATE_USER_REQUEST","UPDATE_USER_SUCCESS","UPDATE_USER_FAILURE","MOVE_CLIENT_TO_USER_REQUEST","MOVE_CLIENT_TO_USER_SUCCESS","MOVE_CLIENT_TO_USER_FAILURE","DELETE_REQUEST","DELETE_SUCCESS","DELETE_FAILURE","twittConstants","CREATE_REQUEST","CREATE_SUCCESS","CREATE_FAILURE","UPDATE_REQUEST","UPDATE_SUCCESS","UPDATE_FAILURE","user","initialState","loggedIn","items","loading","error","rootReducer","combineReducers","authentication","state","action","type","loggingIn","registration","registering","users","filter","id","map","deleting","userCopy","deleteError","twitts","console","log","alert","message","loggerMiddleware","createLogger","store","createStore","applyMiddleware","thunkMiddleware","authHeader","token","Header","welcomeBox","className","href","Navbar","color-on-scroll","bg","variant","expand","Brand","Text","Toggle","aria-controls","Collapse","Footer","Container","Row","Date","getFullYear","alertActions","success","clear","API_URL","userService","login","email","password","requestOptions","method","headers","body","stringify","fetch","then","_handleResponse","setItem","data","logout","register","getAll","_handleUserData","getAllClients","getAllUsers","getById","update","delete","removeItem","response","text","dataObject","ok","status","statusText","Promise","reject","Array","isArray","item","_transformData","isAdmin","is_admin","isUser","is_user","isClient","is_client","is_user_active","accountId","account_id","contactId","contact_id","firstName","user_first_name","lastName","user_last_name","username","name","phone","user_phone","twittService","getAllTwitts","create","twitt","window","location","reload","userId","user_id","avatarImgPath","img_path","isFollow","userActions","dispatch","push","failure","toString","request","moveClientToUser","twittActions","LoginForm","useState","inputs","setInputs","show","setShow","validated","setValidated","submitted","setSubmitted","useSelector","useDispatch","handleClose","handleChange","e","target","value","useEffect","listen","Modal","onHide","Form","noValidate","onSubmit","event","preventDefault","currentTarget","checkValidity","stopPropagation","closeButton","Title","icon","faSignInAlt","Body","Alert","Group","controlId","Label","Control","placeholder","onChange","required","Button","onClick","RegisterForm","c_password","setUser","faUserPlus","userame","Spinner","TwittList","props","twittsListData","mounted","useRef","current","listItems","index","itemData","key","Col","xs","md","Image","src","avatarImage","rounded","Check","custom","Input","checked","tempTwittListData","switchValue","TwittsPage","newTwitt","setNewTwitt","faUsers","Card","isValidForm","as","rows","App","path","exact","component","from","to","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.38d42c38.chunk.js","sourcesContent":["// array in local storage for registered users\nlet users = JSON.parse(localStorage.getItem('users')) || [];\n    \nexport function configureFakeBackend() {\n    let realFetch = window.fetch;\n    window.fetch = function (url, opts) {\n        const { method, headers } = opts;\n        const body = opts.body && JSON.parse(opts.body);\n\n        return new Promise((resolve, reject) => {\n            // wrap in timeout to simulate server api call\n            setTimeout(handleRoute, 500);\n\n            function handleRoute() {\n                switch (true) {\n                    case url.endsWith('/users/authenticate') && method === 'POST':\n                        return authenticate();\n                    case url.endsWith('/users/register') && method === 'POST':\n                        return register();\n                    case url.endsWith('/users') && method === 'GET':\n                        return getUsers();\n                    case url.match(/\\/users\\/\\d+$/) && method === 'DELETE':\n                        return deleteUser();\n                    default:\n                        // pass through any requests not handled above\n                        return realFetch(url, opts)\n                            .then(response => resolve(response))\n                            .catch(error => reject(error));\n                }\n            }\n\n            // route functions\n\n            function authenticate() {\n                const { username, password } = body;\n                const user = users.find(x => x.username === username && x.password === password);\n                if (!user) return error('Username or password is incorrect');\n                return ok({\n                    id: user.id,\n                    username: user.username,\n                    firstName: user.firstName,\n                    lastName: user.lastName,\n                    token: 'fake-jwt-token'\n                });\n            }\n\n            function register() {\n                const user = body;\n    \n                if (users.find(x => x.username === user.username)) {\n                    return error(`Username  ${user.username} is already taken`);\n                }\n    \n                // assign user id and a few other properties then save\n                user.id = users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n                users.push(user);\n                localStorage.setItem('users', JSON.stringify(users));\n\n                return ok();\n            }\n    \n            function getUsers() {\n                if (!isLoggedIn()) return unauthorized();\n\n                return ok(users);\n            }\n    \n            function deleteUser() {\n                if (!isLoggedIn()) return unauthorized();\n    \n                users = users.filter(x => x.id !== idFromUrl());\n                localStorage.setItem('users', JSON.stringify(users));\n                return ok();\n            }\n\n            // helper functions\n\n            function ok(body) {\n                resolve({ ok: true, text: () => Promise.resolve(JSON.stringify(body)) });\n            }\n\n            function unauthorized() {\n                resolve({ status: 401, text: () => Promise.resolve(JSON.stringify({ message: 'Unauthorized' })) });\n            }\n\n            function error(message) {\n                resolve({ status: 400, text: () => Promise.resolve(JSON.stringify({ message })) });\n            }\n\n            function isLoggedIn() {\n                return headers['Authorization'] === 'Bearer fake-jwt-token';\n            }\n    \n            function idFromUrl() {\n                const urlParts = url.split('/');\n                return parseInt(urlParts[urlParts.length - 1]);\n            }\n        });\n    }\n}","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","export const alertConstants = {\n    SUCCESS: 'ALERT_SUCCESS',\n    ERROR: 'ALERT_ERROR',\n    CLEAR: 'ALERT_CLEAR'\n};\n","export const userConstants = {\n  REGISTER_REQUEST: \"USERS_REGISTER_REQUEST\",\n  REGISTER_SUCCESS: \"USERS_REGISTER_SUCCESS\",\n  REGISTER_FAILURE: \"USERS_REGISTER_FAILURE\",\n\n  LOGIN_REQUEST: \"USERS_LOGIN_REQUEST\",\n  LOGIN_SUCCESS: \"USERS_LOGIN_SUCCESS\",\n  LOGIN_FAILURE: \"USERS_LOGIN_FAILURE\",\n\n  LOGOUT: \"USERS_LOGOUT\",\n\n  GETALL_REQUEST: \"USERS_GETALL_REQUEST\",\n  GETALL_SUCCESS: \"USERS_GETALL_SUCCESS\",\n  GETALL_FAILURE: \"USERS_GETALL_FAILURE\",\n\n  GET_USER_BY_ID_REQUEST: \"USER_GET_BY_ID_REQUEST\",\n  GET_USER_BY_ID_SUCCESS: \"USER_GET_BY_ID_SUCCESS\",\n  GET_USER_BY_ID_FAILURE: \"USER_GET_BY_ID_FAILURE\",\n\n  UPDATE_USER_REQUEST: \"USER_UPDATE_REQUEST\",\n  UPDATE_USER_SUCCESS: \"USER_UPDATE_SUCCESS\",\n  UPDATE_USER_FAILURE: \"USER_UPDATE_FAILURE\",\n\n  MOVE_CLIENT_TO_USER_REQUEST: \"MOVE_CLIENT_TO_USER_REQUEST\",\n  MOVE_CLIENT_TO_USER_SUCCESS: \"MOVE_CLIENT_TO_USER_SUCCESS\",\n  MOVE_CLIENT_TO_USER_FAILURE: \"MOVE_CLIENT_TO_USER_FAILURE\",\n\n  DELETE_REQUEST: \"USERS_DELETE_REQUEST\",\n  DELETE_SUCCESS: \"USERS_DELETE_SUCCESS\",\n  DELETE_FAILURE: \"USERS_DELETE_FAILURE\",\n};\n","export const twittConstants = {\n  CREATE_REQUEST: \"TWITT_CREATE_REQUEST\",\n  CREATE_SUCCESS: \"TWITT_CREATE_SUCCESS\",\n  CREATE_FAILURE: \"TWITT_CREATE_FAILURE\",\n\n  GETALL_REQUEST: \"TWITTS_GETALL_REQUEST\",\n  GETALL_SUCCESS: \"TWITTS_GETALL_SUCCESS\",\n  GETALL_FAILURE: \"TWITTS_GETALL_FAILURE\",\n\n  UPDATE_REQUEST: \"TWITT_UPDATE_REQUEST\",\n  UPDATE_SUCCESS: \"TWITT_UPDATE_SUCCESS\",\n  UPDATE_FAILURE: \"TWITT_UPDATE_FAILURE\",\n};\n","import { userConstants } from '../_constants';\n\nlet user = JSON.parse(localStorage.getItem('user'));\nconst initialState = user ? { loggedIn: true, user } : {};\n\nexport function authentication(state = initialState, action) {\n  switch (action.type) {\n    case userConstants.LOGIN_REQUEST:\n      return {\n        loggingIn: true,\n        user: action.user\n      };\n    case userConstants.LOGIN_SUCCESS:\n      return {\n        loggedIn: true,\n        user: action.user\n      };\n    case userConstants.LOGIN_FAILURE:\n      return {};\n    case userConstants.LOGOUT:\n      return {};\n    default:\n      return state\n  }\n}","import { userConstants } from \"../_constants\";\n\nconst initialState = {\n  items: [],\n  loading: false,\n  error: null,\n};\n\nexport function users(state = initialState, action) {\n  switch (action.type) {\n    case userConstants.GETALL_REQUEST:\n      return {\n        loading: true,\n      };\n    case userConstants.GETALL_SUCCESS:\n      return {\n        ...state,\n        items: action.users,\n        loading: false,\n      };\n    case userConstants.GETALL_FAILURE:\n      return {\n        error: action.error,\n      };\n    case userConstants.GET_USER_BY_ID_REQUEST:\n      return {\n        loading: true,\n      };\n    case userConstants.GET_USER_BY_ID_SUCCESS:\n      return {\n        items: action.user,\n        loading: false,\n      };\n    case userConstants.GET_USER_BY_ID_FAILURE:\n      return {\n        error: action.error,\n      };\n    case userConstants.UPDATE_USER_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case userConstants.UPDATE_USER_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n      };\n    case userConstants.UPDATE_USER_FAILURE:\n      return {\n        error: action.error,\n      };\n    case userConstants.MOVE_CLIENT_TO_USER_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case userConstants.MOVE_CLIENT_TO_USER_SUCCESS:\n      return {\n        ...state,\n        items: state.items.filter((user) => user.id !== action.user.id),\n        loading: false,\n      };\n    case userConstants.MOVE_CLIENT_TO_USER_FAILURE:\n      return {\n        error: action.error,\n      };\n    case userConstants.DELETE_REQUEST:\n      // add 'deleting:true' property to user being deleted\n      return {\n        ...state,\n        items: state.items.map((user) =>\n          user.id === action.id ? { ...user, deleting: true } : user\n        ),\n      };\n    case userConstants.DELETE_SUCCESS:\n      // remove deleted user from state\n      return {\n        items: state.items.filter((user) => user.id !== action.id),\n      };\n    case userConstants.DELETE_FAILURE:\n      // remove 'deleting:true' property and add 'deleteError:[error]' property to user\n      return {\n        ...state,\n        items: state.items.map((user) => {\n          if (user.id === action.id) {\n            // make copy of user without 'deleting:true' property\n            const { deleting, ...userCopy } = user;\n            // return copy of user with 'deleteError:[error]' property\n            return { ...userCopy, deleteError: action.error };\n          }\n\n          return user;\n        }),\n      };\n    default:\n      return state;\n  }\n}\n","import { twittConstants } from \"../_constants\";\n\nconst initialState = {\n  items: [],\n  loading: false,\n  error: null,\n};\n\nexport function twitts(state = initialState, action) {\n  switch (action.type) {\n    case twittConstants.GETALL_REQUEST:\n      return {\n        loading: true,\n      };\n    case twittConstants.GETALL_SUCCESS:\n      return {\n        ...state,\n        items: action.twitts,\n        loading: false,\n      };\n    case twittConstants.GETALL_FAILURE:\n      return {\n        error: action.error,\n      };\n    case twittConstants.CREATE_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case twittConstants.CREATE_SUCCESS:\n      console.log(\"state - \", state);\n      console.log(\"action - \", action);\n      return {\n        ...state,\n        loading: false,\n      };\n    case twittConstants.CREATE_FAILURE:\n      return {\n        error: action.error,\n      };\n    case twittConstants.UPDATE_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case twittConstants.UPDATE_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n      };\n    case twittConstants.UPDATE_FAILURE:\n      return {\n        error: action.error,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport { authentication } from './authentication.reducer';\nimport { registration } from './registration.reducer';\nimport { users } from './users.reducer';\nimport { twitts } from './twitts.reducer';\nimport { alert } from './alert.reducer';\n\nconst rootReducer = combineReducers({\n  authentication,\n  registration,\n  users,\n  twitts,\n  alert\n});\n\nexport default rootReducer;","import { userConstants } from '../_constants';\n\nexport function registration(state = {}, action) {\n  switch (action.type) {\n    case userConstants.REGISTER_REQUEST:\n      return { registering: true };\n    case userConstants.REGISTER_SUCCESS:\n      return {};\n    case userConstants.REGISTER_FAILURE:\n      return {};\n    default:\n      return state\n  }\n}","import { alertConstants } from '../_constants';\n\nexport function alert(state = {}, action) {\n  switch (action.type) {\n    case alertConstants.SUCCESS:\n      return {\n        type: 'alert-success',\n        message: action.message\n      };\n    case alertConstants.ERROR:\n      return {\n        type: 'alert-danger',\n        message: action.message\n      };\n    case alertConstants.CLEAR:\n      return {};\n    default:\n      return state\n  }\n}","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from '../_reducers';\n\nconst loggerMiddleware = createLogger();\n\nexport const store = createStore(\n    rootReducer,\n    applyMiddleware(\n        thunkMiddleware,\n        loggerMiddleware\n    )\n);","export function authHeader() {\n    // return authorization header with jwt token\n    let user = JSON.parse(localStorage.getItem('user'));\n\n    if (user && user.token) {\n        return { 'Authorization': 'Bearer ' + user.token };\n    } else {\n        return {};\n    }\n}","import Header from './Header';\n\nexport default Header;","import React from \"react\";\nimport { Navbar } from \"react-bootstrap\";\n\n// import { useSelector } from \"react-redux\";\n\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import {\n//   faLock,\n//   faIdCard,\n//   faSignOutAlt,\n// } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./Header.css\";\n\nconst Header = () => {\n  // const isLoggedIn = useSelector((state) => state.authentication.loggedIn);\n\n  const welcomeBox = (\n    <span className=\"navbar-info\">\n      <a href=\"/login\">Login&nbsp;</a>/<a href=\"/register\">&nbsp;Register</a>\n    </span>\n  );\n\n  // navigation panel menu items\n  // const twittsMenuItem = <Nav.Link href=\"/users\">Twitts</Nav.Link>;\n\n  return (\n    <div className=\"header d-flex\">\n      <Navbar\n        // className=\"navbar-transparent header-navbar fixed-top\"\n        className=\"header-navbar fixed-top\"\n        color-on-scroll=\"300\"\n        bg=\"secondary\"\n        variant=\"dark\"\n        expand=\"lg\"\n      >\n        <Navbar.Brand href=\"/\">\n          <Navbar.Text>\n            <span className=\"logo-text\">Twitter Clone App</span>\n          </Navbar.Text>\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"app-navbar-nav\" />\n        <Navbar.Collapse className=\"justify-content-end\">\n          {/* <Nav>{isLoggedIn ? twittsMenuItem : null}</Nav> */}\n          {/* <Nav>{twittsMenuItem}</Nav> */}\n          <Navbar.Text className=\"status-text\">{welcomeBox}</Navbar.Text>\n        </Navbar.Collapse>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nimport { Container, Row } from \"react-bootstrap\";\n\nimport \"./Footer.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer footer-black footer-white\">\n      <Container>\n        <Row>\n          <nav className=\"footer-nav\">\n            <ul>\n              <li>\n                <a href=\"/\">TWITTS</a>\n              </li>\n            </ul>\n          </nav>\n          <div className=\"credits ml-auto\">\n            <span className=\"copyright\">\n              Copyright © {new Date().getFullYear()}\n            </span>\n          </div>\n        </Row>\n      </Container>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import Footer from './Footer';\n\nexport default Footer;","import { alertConstants } from '../_constants';\n\nexport const alertActions = {\n    success,\n    error,\n    clear\n};\n\nfunction success(message) {\n    return { type: alertConstants.SUCCESS, message };\n}\n\nfunction error(message) {\n    return { type: alertConstants.ERROR, message };\n}\n\nfunction clear() {\n    return { type: alertConstants.CLEAR };\n}","// import config from 'config';\nimport { authHeader } from \"../_helpers\";\n\n// const API_URL = \"http://stylist-api.test/api/v1\";\nconst API_URL = \"http://127.0.0.1:8000\";\n\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getAllClients,\n  getAllUsers,\n  getById,\n  update,\n  delete: _delete,\n};\n\nfunction login(email, password) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ email, password }),\n  };\n\n  return fetch(`${API_URL}/auth/login`, requestOptions)\n    .then(_handleResponse)\n    .then((user) => {\n      // store user details and jwt token in local storage to keep user logged in between page refreshes\n      localStorage.setItem(\"user\", JSON.stringify(user.data));\n\n      return user;\n    });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}/users`, requestOptions)\n    .then(_handleResponse)\n    .then(_handleUserData);\n}\n\nfunction getAllClients() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}/allclients`, requestOptions)\n    .then(_handleResponse)\n    .then(_handleUserData);\n}\n\nfunction getAllUsers() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}/allusers`, requestOptions)\n    .then(_handleResponse)\n    .then(_handleUserData);\n}\n\n// function getAllByAccountId(id) {\n//     const requestOptions = {\n//         method: 'GET',\n//         headers: authHeader()\n//     };\n\n//     return fetch(`${API_URL}/account/${id}/users`, requestOptions).then(_handleResponse);\n// }\n\nfunction getById(id) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}/users/${id}`, requestOptions)\n    .then(_handleResponse)\n    .then(_handleUserData);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(user),\n  };\n\n  return fetch(`${API_URL}/auth/register`, requestOptions).then(\n    _handleResponse\n  );\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(), \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(user),\n  };\n\n  return fetch(`${API_URL}/users/${user.id}`, requestOptions)\n    .then(_handleResponse)\n    .then(_handleUserData);\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}/users/${id}`, requestOptions).then(_handleResponse);\n}\n\nfunction _handleResponse(response) {\n  return response.text().then((text) => {\n    const dataObject = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        // window.location.reload(true);\n      }\n\n      const error = (dataObject && dataObject.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    // console.log('dataObject - ', dataObject);\n    return dataObject;\n  });\n}\n\n// this function getting data from response and returns them as an array\nfunction _handleUserData(dataObject) {\n  const data = dataObject ? dataObject.data : [];\n  const dataArray = Array.isArray(data)\n    ? data.map((item) => _transformData(item))\n    : _transformData(data);\n\n  return dataArray;\n}\n\n// this function transforms and returns a structure of user's data for next using\nfunction _transformData(data) {\n  return {\n    id: data.id,\n    // role: data.role,\n    isAdmin: data.is_admin,\n    isUser: data.is_user,\n    isClient: data.is_client,\n    status: data.is_user_active,\n    accountId: data.account_id,\n    contactId: data.contact_id,\n    firstName: data.user_first_name,\n    lastName: data.user_last_name,\n    username: data.name,\n    phone: data.user_phone,\n    email: data.email,\n  };\n}\n","// import config from 'config';\nimport { authHeader } from \"../_helpers\";\n\nconst API_URL = \"http://127.0.0.1:8000\";\n\nexport const twittService = {\n  getAllTwitts,\n  create,\n  update,\n};\n\nfunction getAllTwitts() {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(),\n  };\n\n  return fetch(`${API_URL}/api/twitts`, requestOptions)\n    .then(_handleResponse)\n    .then(_handleUserData);\n}\n\nfunction create(twitt) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(twitt),\n  };\n\n  return fetch(`${API_URL}/api/twitts`, requestOptions).then(_handleResponse);\n}\n\nfunction update(twitt) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { ...authHeader(), \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(twitt),\n  };\n\n  return fetch(`${API_URL}/api/twitts/${twitt.id}`, requestOptions)\n    .then(_handleResponse)\n    .then(_handleUserData);\n}\n\nfunction _handleResponse(response) {\n  return response.text().then((text) => {\n    const dataObject = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        // logout();\n        window.location.reload(true);\n      }\n\n      const error = (dataObject && dataObject.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    // console.log('dataObject - ', dataObject);\n    return dataObject;\n  });\n}\n\n// this function getting data from response and returns them as an array\nfunction _handleUserData(dataObject) {\n  const data = dataObject ? dataObject.data : [];\n  const dataArray = Array.isArray(data)\n    ? data.map((item) => _transformData(item))\n    : _transformData(data);\n\n  return dataArray;\n}\n\n// this function transforms and returns a structure of user's data for next using\nfunction _transformData(data) {\n  return {\n    id: data.id,\n    userId: data.user_id,\n    name: data.name,\n    email: data.email,\n    avatarImgPath: data.img_path,\n    body: data.body,\n    isFollow: data.isFollow,\n  };\n}\n","import { userConstants } from \"../_constants\";\nimport { userService } from \"../_services\";\nimport { alertActions } from \"./\";\nimport { history } from \"../_helpers\";\n\nexport const userActions = {\n  login,\n  logout,\n  register,\n  getAll,\n  getAllClients,\n  getAllUsers,\n  getById,\n  update,\n  moveClientToUser,\n  delete: _delete,\n};\n\nfunction login(email, password) {\n  return (dispatch) => {\n    dispatch(request({ email }));\n\n    userService.login(email, password).then(\n      (user) => {\n        dispatch(success(user));\n        history.push(\"/\");\n      },\n      (error) => {\n        dispatch(failure(error.toString()));\n        dispatch(alertActions.error(error.toString()));\n      }\n    );\n  };\n\n  function request(user) {\n    return { type: userConstants.LOGIN_REQUEST, user };\n  }\n  function success(user) {\n    return { type: userConstants.LOGIN_SUCCESS, user };\n  }\n  function failure(error) {\n    return { type: userConstants.LOGIN_FAILURE, error };\n  }\n}\n\nfunction logout() {\n  userService.logout();\n  return { type: userConstants.LOGOUT };\n}\n\nfunction register(user) {\n  return (dispatch) => {\n    dispatch(request(user));\n\n    userService.register(user).then(\n      (user) => {\n        dispatch(success(user));\n        history.push(\"/login\");\n        dispatch(alertActions.success(\"Registration successful\"));\n      },\n      (error) => {\n        dispatch(failure(error.toString()));\n        dispatch(alertActions.error(error.toString()));\n      }\n    );\n  };\n\n  function request(user) {\n    return { type: userConstants.REGISTER_REQUEST, user };\n  }\n  function success(user) {\n    return { type: userConstants.REGISTER_SUCCESS, user };\n  }\n  function failure(error) {\n    return { type: userConstants.REGISTER_FAILURE, error };\n  }\n}\n\nfunction getAll() {\n  return (dispatch) => {\n    dispatch(request());\n\n    userService.getAll().then(\n      (users) => dispatch(success(users)),\n      (error) => dispatch(failure(error.toString()))\n    );\n  };\n\n  function request() {\n    return { type: userConstants.GETALL_REQUEST };\n  }\n  function success(users) {\n    return { type: userConstants.GETALL_SUCCESS, users };\n  }\n  function failure(error) {\n    return { type: userConstants.GETALL_FAILURE, error };\n  }\n}\n\nfunction getAllClients() {\n  return (dispatch) => {\n    dispatch(request());\n\n    userService.getAllClients().then(\n      (users) => dispatch(success(users)),\n      (error) => dispatch(failure(error.toString()))\n    );\n  };\n\n  function request() {\n    return { type: userConstants.GETALL_REQUEST };\n  }\n  function success(users) {\n    return { type: userConstants.GETALL_SUCCESS, users };\n  }\n  function failure(error) {\n    return { type: userConstants.GETALL_FAILURE, error };\n  }\n}\n\nfunction getAllUsers() {\n  return (dispatch) => {\n    dispatch(request());\n\n    userService.getAllUsers().then(\n      (users) => dispatch(success(users)),\n      (error) => dispatch(failure(error.toString()))\n    );\n  };\n\n  function request() {\n    return { type: userConstants.GETALL_REQUEST };\n  }\n  function success(users) {\n    return { type: userConstants.GETALL_SUCCESS, users };\n  }\n  function failure(error) {\n    return { type: userConstants.GETALL_FAILURE, error };\n  }\n}\n\nfunction getById(id) {\n  return (dispatch) => {\n    dispatch(request(id));\n\n    userService.getById(id).then(\n      (user) => dispatch(success(user)),\n      (error) => dispatch(failure(error.toString()))\n    );\n  };\n\n  function request(id) {\n    return { type: userConstants.GET_USER_BY_ID_REQUEST, id };\n  }\n  function success(user) {\n    return { type: userConstants.GET_USER_BY_ID_SUCCESS, user };\n  }\n  function failure(id, error) {\n    return { type: userConstants.GET_USER_BY_ID_FAILURE, id, error };\n  }\n}\n\nfunction update(user) {\n  return (dispatch) => {\n    dispatch(request(user));\n\n    userService.update(user).then(\n      (user) => {\n        dispatch(success(user));\n        dispatch(alertActions.success(\"User updated successfully.\"));\n      },\n      (error) => {\n        dispatch(failure(error.toString()));\n        dispatch(alertActions.error(error.toString()));\n      }\n    );\n  };\n\n  function request(user) {\n    return { type: userConstants.UPDATE_USER_REQUEST, user };\n  }\n  function success(user) {\n    return { type: userConstants.UPDATE_USER_SUCCESS, user };\n  }\n  function failure(error) {\n    return { type: userConstants.UPDATE_USER_FAILURE, error };\n  }\n}\n\nfunction moveClientToUser(user) {\n  return (dispatch) => {\n    dispatch(request(user));\n\n    userService.update(user).then(\n      (user) => {\n        dispatch(success(user));\n        dispatch(\n          alertActions.success(\"Client moved to user status successfully.\")\n        );\n      },\n      (error) => {\n        dispatch(failure(error.toString()));\n        dispatch(alertActions.error(error.toString()));\n      }\n    );\n  };\n\n  function request(user) {\n    return { type: userConstants.MOVE_CLIENT_TO_USER_REQUEST, user };\n  }\n  function success(user) {\n    return { type: userConstants.MOVE_CLIENT_TO_USER_SUCCESS, user };\n  }\n  function failure(error) {\n    return { type: userConstants.MOVE_CLIENT_TO_USER_FAILURE, error };\n  }\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n  return (dispatch) => {\n    dispatch(request(id));\n\n    userService.delete(id).then(\n      (id) => dispatch(success(id)),\n      (error) => dispatch(failure(id, error.toString()))\n    );\n  };\n\n  function request(id) {\n    return { type: userConstants.DELETE_REQUEST, id };\n  }\n  function success(id) {\n    return { type: userConstants.DELETE_SUCCESS, id };\n  }\n  function failure(id, error) {\n    return { type: userConstants.DELETE_FAILURE, id, error };\n  }\n}\n","import { twittConstants } from \"../_constants\";\nimport { twittService } from \"../_services\";\nimport { alertActions } from \"./\";\nimport { history } from \"../_helpers\";\n\nexport const twittActions = {\n  getAllTwitts,\n  create,\n  update,\n};\n\nfunction getAllTwitts() {\n  return (dispatch) => {\n    dispatch(request());\n\n    twittService.getAllTwitts().then(\n      (twitts) => dispatch(success(twitts)),\n      (error) => dispatch(failure(error.toString()))\n    );\n  };\n\n  function request() {\n    return { type: twittConstants.GETALL_REQUEST };\n  }\n  function success(twitts) {\n    return { type: twittConstants.GETALL_SUCCESS, twitts };\n  }\n  function failure(error) {\n    return { type: twittConstants.GETALL_FAILURE, error };\n  }\n}\n\nfunction create(twitt) {\n  return (dispatch) => {\n    dispatch(request(twitt));\n\n    twittService.create(twitt).then(\n      (twitt) => {\n        dispatch(success(twitt));\n        history.push(\"/\");\n        dispatch(alertActions.success(\"Posted successful\"));\n      },\n      (error) => {\n        dispatch(failure(error.toString()));\n        dispatch(alertActions.error(error.toString()));\n      }\n    );\n  };\n\n  function request(twitt) {\n    return { type: twittConstants.CREATE_REQUEST, twitt };\n  }\n  function success(twitt) {\n    return { type: twittConstants.CREATE_SUCCESS, twitt };\n  }\n  function failure(error) {\n    return { type: twittConstants.CREATE_FAILURE, error };\n  }\n}\n\nfunction update(twitt) {\n  return (dispatch) => {\n    dispatch(request(twitt));\n\n    twittService.update(twitt).then(\n      (twitt) => {\n        dispatch(success(twitt));\n        dispatch(alertActions.success(\"Twitt updated successfully.\"));\n      },\n      (error) => {\n        dispatch(failure(error.toString()));\n        dispatch(alertActions.error(error.toString()));\n      }\n    );\n  };\n\n  function request(twitt) {\n    return { type: twittConstants.UPDATE_REQUEST, twitt };\n  }\n  function success(twitt) {\n    return { type: twittConstants.UPDATE_SUCCESS, twitt };\n  }\n  function failure(error) {\n    return { type: twittConstants.UPDATE_FAILURE, error };\n  }\n}\n","import LoginForm from './LoginForm';\n\nexport default LoginForm;","import React, { useState, useEffect } from \"react\";\nimport { Modal, Form, Button, Alert } from \"react-bootstrap\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSignInAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { history } from \"../../../../_helpers\";\nimport { userActions, alertActions } from \"../../../../_actions\";\n\nimport \"./LoginForm.css\";\n\nconst LoginForm = () => {\n  const [inputs, setInputs] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  const [show, setShow] = useState(true);\n  const [validated, setValidated] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  const { email, password } = inputs;\n  const loggingIn = useSelector((state) => state.authentication.loggingIn);\n  const loggedIn = useSelector((state) => state.authentication.loggedIn);\n  const alert = useSelector((state) => state.alert);\n  const dispatch = useDispatch();\n\n  // reset login status\n  useEffect(() => {\n    dispatch(userActions.logout());\n  }, [dispatch]);\n\n  useEffect(() => {\n    history.listen((location, action) => {\n      // clear alert on location change\n      dispatch(alertActions.clear());\n    });\n  }, [dispatch]);\n\n  function handleClose() {\n    setShow(false);\n  }\n\n  function handleChange(e) {\n    const { name, value } = e.target;\n    setInputs((inputs) => ({ ...inputs, [name]: value }));\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    const isValidForm = form.checkValidity();\n\n    if (isValidForm === false) {\n      event.stopPropagation();\n    } else {\n      dispatch(userActions.login(email, password));\n    }\n\n    setValidated(true);\n    setSubmitted(true);\n  }\n\n  return (\n    <div className=\"login-form\">\n      <Modal show={show && !loggedIn} onHide={handleClose}>\n        <Form noValidate validated={validated} onSubmit={handleSubmit}>\n          <Modal.Header closeButton>\n            <Modal.Title>\n              <FontAwesomeIcon icon={faSignInAlt} /> Login\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {alert.message && (\n              <Alert variant={`alert ${alert.type}`}>{alert.message}</Alert>\n            )}\n            <Form.Group controlId=\"email\">\n              <Form.Label>\n                Email <span className=\"required-mark\">*</span>\n              </Form.Label>\n              <Form.Control\n                className=\"control\"\n                name=\"email\"\n                type=\"email\"\n                value={email || \"\"}\n                placeholder=\"Enter email\"\n                onChange={handleChange}\n                required\n              />\n              {submitted && !email && (\n                <div className=\"invalid-feedback\">Email is required</div>\n              )}\n            </Form.Group>\n            <Form.Group controlId=\"password\">\n              <Form.Label>\n                Password <span className=\"required-mark\">*</span>\n              </Form.Label>\n              <Form.Control\n                name=\"password\"\n                type=\"password\"\n                value={password || \"\"}\n                placeholder=\"Password\"\n                onChange={handleChange}\n                required\n              />\n              {submitted && !password && (\n                <div className=\"invalid-feedback\">Password is required</div>\n              )}\n            </Form.Group>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" type=\"submit\">\n              {loggingIn && (\n                <span className=\"spinner-border spinner-border-sm mr-1\"></span>\n              )}\n              Login\n            </Button>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Cancel\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import RegisterForm from './RegisterForm';\n\nexport default RegisterForm;","import React, { useState, useEffect } from \"react\";\nimport { Modal, Form, Button } from \"react-bootstrap\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { userActions } from \"../../../../_actions\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUserPlus } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./RegisterForm.css\";\n\nconst RegisterForm = () => {\n  const [user, setUser] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    c_password: \"\",\n  });\n  const [show, setShow] = useState(true);\n  const [validated, setValidated] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  const registering = useSelector((state) => state.registration.registering);\n  const dispatch = useDispatch();\n\n  // reset login status\n  useEffect(() => {\n    dispatch(userActions.logout());\n  }, [dispatch]);\n\n  const handleClose = () => setShow(false);\n\n  function handleChange(e) {\n    const { name, value } = e.target;\n    setUser((user) => ({ ...user, [name]: value }));\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    const isValidForm = form.checkValidity();\n\n    if (isValidForm === false) {\n      event.stopPropagation();\n    } else {\n      if (\n        user.firstName &&\n        user.lastName &&\n        user.username &&\n        user.email &&\n        user.password &&\n        user.c_password\n      ) {\n        dispatch(userActions.register(user));\n      }\n    }\n\n    setValidated(true);\n    setSubmitted(true);\n  }\n\n  return (\n    <div className=\"register-form\">\n      <Modal show={show} onHide={handleClose}>\n        <Form noValidate validated={validated} onSubmit={handleSubmit}>\n          <Modal.Header closeButton>\n            <Modal.Title>\n              <FontAwesomeIcon icon={faUserPlus} /> Register\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form.Group controlId=\"userName\">\n              <Form.Label>Username</Form.Label>\n              <Form.Control\n                className=\"control\"\n                name=\"username\"\n                type=\"text\"\n                value={user.username}\n                placeholder=\"Username\"\n                onChange={handleChange}\n                required\n              />\n              {submitted && !user.userame && (\n                <div className=\"invalid-feedback\">Userame is required</div>\n              )}\n            </Form.Group>\n            <Form.Group controlId=\"email\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                className=\"control\"\n                name=\"email\"\n                type=\"email\"\n                value={user.email}\n                placeholder=\"Enter email\"\n                onChange={handleChange}\n                required\n              />\n              {submitted && !user.email && (\n                <div className=\"invalid-feedback\">Email is required</div>\n              )}\n            </Form.Group>\n            <Form.Group controlId=\"password\">\n              <Form.Label>Password</Form.Label>\n              <Form.Control\n                className=\"control\"\n                name=\"password\"\n                type=\"password\"\n                value={user.password}\n                placeholder=\"Password\"\n                onChange={handleChange}\n                required\n              />\n              {submitted && !user.password && (\n                <div className=\"invalid-feedback\">Password is required</div>\n              )}\n            </Form.Group>\n            <Form.Group controlId=\"confirmPassword\">\n              <Form.Label>Confirm Password</Form.Label>\n              <Form.Control\n                className=\"control\"\n                name=\"c_password\"\n                type=\"password\"\n                value={user.c_password}\n                placeholder=\"Confirm Password\"\n                onChange={handleChange}\n                required\n              />\n              {submitted && !user.c_password && (\n                <div className=\"invalid-feedback\">\n                  Confirm password is required\n                </div>\n              )}\n            </Form.Group>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button type=\"submit\" variant=\"primary\">\n              {registering && (\n                <span className=\"spinner-border spinner-border-sm mr-1\"></span>\n              )}\n              Register\n            </Button>\n            <Button variant=\"secondary\" onClick={handleClose}>\n              Cancel\n            </Button>\n          </Modal.Footer>\n        </Form>\n      </Modal>\n    </div>\n  );\n};\n\nexport default RegisterForm;\n","export default __webpack_public_path__ + \"static/media/user1-picture.09841708.png\";","import Spinner from './Spinner';\n\nexport default Spinner;","import React from 'react';\n\nimport './Spinner.css';\n\nconst Spinner = () => {\n  return (\n    <div className=\"loadingio-spinner-spinner-1tzc6outqco\">\n      <div className=\"ldio-417hbrxynk\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n    );\n};\n\nexport default Spinner;","import TwittList from \"./TwittList\";\n\nexport default TwittList;\n","import React, { useEffect, useRef } from \"react\";\nimport { Form, Container, Row, Col, Image } from \"react-bootstrap\";\n\nimport avatarImage from \"../../../assets/img/faces/user1-picture.png\";\n// import { useHistory } from \"react-router\";\n\n// import ReactTooltip from \"react-tooltip\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { twittActions } from \"../../../_actions\";\n\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nimport Spinner from \"../Spinner\";\n\nimport \"./TwittList.css\";\n\nconst TwittList = (props) => {\n  const twitts = useSelector((state) => state.twitts);\n  const loading = useSelector((state) => state.twitts.loading);\n  // const [statusSwitcher, setStatusSwitcher] = useState(true);\n\n  // const user = useSelector(state => state.authentication.user);\n  const dispatch = useDispatch();\n  // const history = useHistory();\n\n  const twittsListData = twitts.items ? twitts.items : [];\n\n  const mounted = useRef();\n\n  useEffect(() => {\n    // only on componentDidMount event\n    if (!mounted.current) {\n      mounted.current = true;\n      dispatch(twittActions.getAllTwitts());\n    } else {\n      // do componentDidUpate logic\n    }\n  }, [dispatch]);\n\n  const switchValue = (value, index, item) => {\n    let tempTwittListData = twittsListData;\n    tempTwittListData[index] = {\n      ...item,\n      [value]: item[value] === 1 ? 0 : 1,\n    };\n    dispatch(twittActions.update(tempTwittListData[index]));\n  };\n\n  // const handleModalClose = () => {\n  //   setShow(false);\n  // };\n\n  // function createItem(item, password, requireLogin) {\n  //   return {\n  //     accountId: item.accountId,\n  //     firstName: item.firstName,\n  //     lastName: item.lastName,\n  //     username: item.username,\n  //     isAdmin: item.isAdmin,\n  //     isClient: item.isClient,\n  //     isUser: item.isUser,\n  //     status: item.status,\n  //     phone: item.phone,\n  //     email: item.email,\n  //     password: password,\n  //     c_password: password, // from User list generated password without confirmation\n  //     requireLogin: requireLogin,\n  //   };\n  // }\n\n  // const saveModalDetails = (item, password, requireLogin) => {\n  //   let tempUserListData = userListData;\n  //   if (editMode) {\n  //     // update user mode\n  //     tempUserListData[requiredItem] = {\n  //       ...item,\n  //       password: password,\n  //       requireLogin: requireLogin,\n  //     };\n  //     dispatch(userActions.update(item));\n  //   } else {\n  //     // create new account user mode\n  //     const newItem = createItem(item, password, requireLogin);\n  //     dispatch(userActions.register(newItem));\n  //   }\n  //   setShow(false);\n  //   handleModalClose();\n  // };\n\n  // const deleteItem = (index) => {\n  //   // console.log(\"index - \", index);\n  //   // let tempUsers = userListData;\n  //   // tempUsers.splice(index, 1);\n  //   // setBrochure(tempBrochure);\n  //   history.replace();\n  // };\n\n  // const switchValue = (value, index, item) => {\n  //   let tempUserListData = userListData;\n  //   tempUserListData[index] = {\n  //     ...item,\n  //     [value]: item[value] === 1 ? 0 : 1,\n  //   };\n  //   dispatch(userActions.update(tempUserListData[index]));\n  // };\n\n  // const moveClientToUser = (index, item) => {\n  //   let tempUserListData = userListData;\n  //   tempUserListData[index] = {\n  //     ...item,\n  //     isClient: 0,\n  //     isUser: 1,\n  //   };\n  //   dispatch(userActions.moveClientToUser(tempUserListData[index]));\n  // };\n\n  // function addUserAccountButton() {\n  //   return (\n  //     <div className=\"user-list-add-user-link float-right\">\n  //       <button\n  //         type=\"button\"\n  //         className=\"btn btn-outline-primary btn-sm user-list-action-btn\"\n  //         onClick={() => openModalFormInAddMode()}\n  //       >\n  //         <FontAwesomeIcon className=\"user-list-item-icon\" icon={faPlus} />\n  //         <span className=\"user-list-add-user-title\">Add Account User</span>\n  //       </button>\n  //     </div>\n  //   );\n  // }\n\n  // function addMoveClientToUserButton(index, itemData) {\n  //   return (\n  //     <div className=\"float-right\">\n  //       <button\n  //         type=\"button\"\n  //         className=\"btn btn-outline-primary btn-sm user-list-action-btn\"\n  //         onClick={() => moveClientToUser(index, itemData)}\n  //         data-tip\n  //         data-for=\"moveClientToUserTip\"\n  //       >\n  //         <FontAwesomeIcon className=\"user-list-item-icon\" icon={faUserTie} />\n  //       </button>\n\n  //       <ReactTooltip id=\"moveClientToUserTip\" place=\"top\" effect=\"solid\">\n  //         Move to Users\n  //       </ReactTooltip>\n  //     </div>\n  //   );\n  // }\n\n  // const emptyListAlert = <tr><td colSpan=\"10\"><b>The list of users are empty!</b></td></tr>;\n\n  // console.log(\"twittsListData - \", twittsListData);\n\n  const listItems = twittsListData.map((item, index) => {\n    const { ...itemData } = item;\n    return (\n      <Container key={index} className=\"twittContainer\">\n        <Row>\n          <Col xs={2} md={1}>\n            <Image\n              className=\"avatarImg\"\n              // src={require(\"../../../assets/img/faces/user1-picture.png\")}\n              src={avatarImage}\n              rounded\n            />\n          </Col>\n          <Col md=\"2\">\n            <b>{itemData.name}</b>\n          </Col>\n          <Col md=\"4\">{itemData.email}</Col>\n          <Col md=\"5\">\n            <Form>\n              <Form.Check custom type=\"switch\">\n                <Form.Check.Input\n                  checked={itemData.isFollow}\n                  onChange={() => {}}\n                />\n                <Form.Check.Label\n                  onClick={() => switchValue(\"isFollow\", index, itemData)}\n                >\n                  {itemData.isFollow ? `Follow  ` : \"Unfollow\"}\n                </Form.Check.Label>\n              </Form.Check>\n            </Form>\n          </Col>\n        </Row>\n        <Row>\n          <Col md=\"12\">{itemData.body}</Col>\n        </Row>\n        <Row></Row>\n      </Container>\n    );\n  });\n\n  if (loading) {\n    return <Spinner />;\n  }\n\n  // let modalFormData = userListData[requiredItem];\n\n  return (\n    <div className=\"twitt-list\">\n      {/* Add Twitt Button */}\n      {/* {addUserAccountButton()} */}\n      {/* End Add Twitt Button */}\n      {/* Twitt List Table */}\n      {/* <Table striped bordered hover size=\"sm\">\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>User ID</th>\n            <th>Body</th>\n            <th>Email</th> */}\n      {/* <th className=\"table-actions-header\">Actions</th> */}\n      {/* </tr>\n        </thead>\n        <tbody> */}\n      {listItems}\n      {/* { (userListData.length !==0) ? listItems : emptyListAlert } */}\n      {/* </tbody>\n      </Table> */}\n      {/* End Twitt List Table */}\n    </div>\n  );\n};\n\nexport default TwittList;\n","import TwittsPage from \"./TwittsPage\";\n\nexport default TwittsPage;\n","import React, { useState } from \"react\";\nimport TwittList from \"../../Widgets/TwittList\";\n\nimport { useDispatch } from \"react-redux\";\nimport { twittActions } from \"../../../_actions\";\n\nimport { Container, Row, Col, Card, Form, Button } from \"react-bootstrap\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUsers } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"./TwittsPage.css\";\n\nconst TwittsPage = () => {\n  const [newTwitt, setNewTwitt] = useState({\n    user_id: 2,\n    name: \"user2\",\n    email: \"user2@gmail.com\",\n    body: \"\",\n    isFollow: false,\n  });\n  const [validated, setValidated] = useState(false);\n\n  const dispatch = useDispatch();\n\n  function handleChange(e) {\n    const { name, value } = e.target;\n    setNewTwitt((newTwitt) => ({ ...newTwitt, [name]: value }));\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    const isValidForm = form.checkValidity();\n\n    setValidated(true);\n\n    if (isValidForm === false) {\n      event.stopPropagation();\n    } else {\n      dispatch(twittActions.create(newTwitt));\n      window.location.reload(false);\n    }\n  }\n\n  return (\n    <div className=\"twitts-page\">\n      <Container>\n        {/* Page Title */}\n        <h2>\n          <FontAwesomeIcon className=\"page-title-icon\" icon={faUsers} />\n          <span className=\"page-title\">Twitts</span>\n        </h2>\n        {/* End Page Title */}\n        {/* Page Content */}\n        <Row>\n          <Col md=\"4\">\n            <Card>\n              <Card.Header>Tweet Something</Card.Header>\n              <Card.Body>\n                <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                  <Form.Group controlId=\"twitt\">\n                    {/* <Form.Control\n                      className=\"control\"\n                      name=\"firstName\"\n                      type=\"textarea\"\n                      // value={user.firstName}\n                      placeholder=\"Right!\"\n                      // onChange={handleChange}\n                      required\n                    /> */}\n                    <Form.Control\n                      as=\"textarea\"\n                      rows=\"3\"\n                      name=\"body\"\n                      onChange={handleChange}\n                      placeholder=\"Text here...\"\n                      required\n                    />\n                  </Form.Group>\n                  <Button variant=\"primary\" type=\"submit\">\n                    Post\n                  </Button>\n                </Form>\n              </Card.Body>\n            </Card>{\" \"}\n          </Col>\n          <Col md=\"8\">\n            <Card>\n              <Card.Header>Recent Tweets</Card.Header>\n              <Card.Body>\n                <TwittList />\n              </Card.Body>\n            </Card>{\" \"}\n          </Col>\n        </Row>\n        {/* End Page Content */}\n      </Container>\n    </div>\n  );\n};\n\nexport default TwittsPage;\n","import React from \"react\";\nimport { Router, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport { history } from \"../../_helpers\";\n// import { PrivateRoute } from \"../../_components\";\n\nimport \"./App.css\";\n\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\n\nimport { LoginForm, RegisterForm } from \"../Forms\";\n\nimport { TwittsPage } from \"../Pages\";\n\nconst App = () => {\n  return (\n    <Router history={history}>\n      <div className=\"stylist-app\">\n        <Header />\n        <div className=\"wrapper\">\n          <Switch>\n            <Route path=\"/\" exact component={TwittsPage} />\n\n            <Route path=\"/login\" component={LoginForm} />\n            <Route path=\"/register\" component={RegisterForm} />\n\n            {/* <PrivateRoute path=\"/add-user\" component={AddUserForm} />\n            <PrivateRoute path=\"/edit-user/:id\" component={EditUserForm} />\n            <PrivateRoute path=\"/users/:id\" component={EditUserForm} />\n            <PrivateRoute\n              path=\"/delete-user-confirm\"\n              component={DeleteUserConfirmForm}\n            /> */}\n\n            {/* <PrivateRoute path=\"/users\" component={UsersPage} /> */}\n            <Redirect from=\"*\" to=\"/\" />\n          </Switch>\n        </div>\n        <Footer />\n      </div>\n    </Router>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from 'react-redux';\n\nimport { store } from './_helpers';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./index.css\";\n\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}